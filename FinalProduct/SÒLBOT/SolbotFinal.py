# -*- coding: utf-8 -*-
"""SolbotFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x2C8UOW7Mqggzge1S6YlF4FG1uXrtDfr

## SOLBOT

Este es un prototipo del chatbot de Incasol, esta basado en chatterbot, un bot open source que se encargara de buscar las respuestas a las preguntas en training.json.

Para mejorar el rendimiento de chatterbot realizamos unos calculos mediante TF-IDF orientando las preguntas del usuario a las preguntas preprogramadas

# Imports
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
import json
from PIL import Image
import streamlit as st
import time

# """# Functions

# """

def init_chatbot(input):
    chatbot = ChatBot('QA', logic_adapters=[
    {
        "import_path": "chatterbot.logic.BestMatch",
        "default_response": "Ho sento, però no entenc la teva consulta! Torna a escriure-la o consulta el fòrum de preguntes freqüents (enllaç: https://incasol.gencat.cat/ca/2-serveis_i_tramits/Fiances-de-lloguers/informacio/preguntes-mes-frequents/)",        
        "maximum_similarity_threshold": 0.95
        }
        ]
    )
    #cargamos las frases
    data = json.loads(open(input, 'r').read())
    return chatbot, data

def create_tf_idf(sentences):

  # Create a TF-IDF vectorizer
    vectorizer = TfidfVectorizer()

  # Fit the vectorizer on the sentences and transform them into numerical representations
    sentence_vectors = vectorizer.fit_transform(sentences)

    return sentence_vectors, vectorizer


def predict_sentence(user_input, sentences, sentence_vectors, vectorizer):

  # Transform the user input into a numerical representation
    user_vector = vectorizer.transform([user_input])

  # Calculate the cosine similarity between the user input and each sentence
    similarity_scores = cosine_similarity(user_vector, sentence_vectors)

  # Find the index of the most similar sentence
    most_similar_index = similarity_scores.argmax()
  ## si poses nomé fiança surten més de un.

  # Retrieve the most similar sentence
    most_similar_sentence = sentences[most_similar_index]

    return most_similar_sentence

def preparar_bot(chatbot, data, tipo, tipos, training_list, search_list):
  #cargamos las frases que contenga el tipo de pregunta
    for row in data:
        if row['main_category'] in tipo or not tipo in tipos:
            training_list.append(row['question'])
            training_list.append(row['answer'])
            search_list.append(row['question'])

    print("Bot: Perfecto!, cual es tu pregunta?")

  #Entrenamos el modelo y calculamos parametros del tf_idf
    trainer = ListTrainer(chatbot)
    trainer.train(training_list)
    sentence_vectors, vectorizer = create_tf_idf(search_list)

    return sentence_vectors, vectorizer 

def descartar_outliers(input_usuari, training_db):
    try: 
      counter = 0
      input_list = input_usuari.split()
      for word in input_list:
        for idx in training_db:
          if word.lower() in idx['question'].lower():
              counter += 1
              break

      ratio = counter/len(input_list)
      if ratio < 0.45:
          return False
      return True
    except:
      return False

# """# Solbot

# Variables
# """

## Imagen-1.jpg

# Open an image file
image = Image.open('Imagen-1.jpg')


# Create a layout with three columns
col1, col2, col3 = st.columns(3)
# Display the image
with col2:
  st.image(image, width=250)

#Variables

# Palabras que si aparecen en el mensaje el chatbot se despide
stop_list = ["Adiós", "Adéu", "Chao", "Ya está", "Ja està", "Gracias", "Gràcies"]

# Tipos disponibles de preguntes
tipos = ["Certificat", "Certificat i Fiança", "Contracte i Fiança", "Còpia Contracte", "Fiances", "Finca i Fiança"]
idiomas = ["Català"]

# bot.py
chatbot, data = init_chatbot('training_catala.json')

# inicializamos vectores que contendran las frases
training_list = []
search_list = []

# preguntamos cual es el idioma y el tipo
idioma = st.selectbox("Escull l'idioma en el que et vols dirigir:", idiomas)
tipo = st.selectbox('Escull el tema de la consulta:', tipos)

# cargamos las frases que contenga el tipo de pregunta
for row in data:
    if row['main_category'] in tipo or not tipo in tipos:
        training_list.append(row['question'])
        training_list.append(row['answer'])
        search_list.append(row['question'])

time.sleep(3)
st.write("**Bot:** Perfecte!")
st.write("*Per a informació que contingui dades personals, adreça't a nosaltres directament mitjançant el nostre telèfon o correu electrònic.*")

# Entrenamos el modelo y calculamos parametros del tf_idf
trainer = ListTrainer(chatbot)
trainer.train(training_list)
sentence_vectors, vectorizer = create_tf_idf(search_list)

# Inicializa una variable de sesión para llevar la cuenta de las iteraciones
if 'counter' not in st.session_state:
    st.session_state.counter = 0
# Initialize a session variable for the conversation history
if 'history' not in st.session_state:
    st.session_state.history = []

# Inicializa una variable de sesión para almacenar la entrada del usuario
if f'input_{st.session_state.counter}' not in st.session_state:
    st.session_state[f'input_{st.session_state.counter}'] = ''

# Create the input field and button
st.session_state[f'input_{st.session_state.counter}'] = st.text_input(f'Introdueixi la seva consulta ({st.session_state.counter + 1}):',
                                                                       st.session_state[f'input_{st.session_state.counter}'])

if st.button('-Respon-', key=f'Respon_{st.session_state.counter}'):
    # Filter user's input
    similarity_output = descartar_outliers(st.session_state[f'input_{st.session_state.counter}'], data)

    if any(elemento in st.session_state[f'input_{st.session_state.counter}'] for elemento in stop_list) or st.session_state.counter > 4:
        st.write(
            "Espero haver-te ajudat. Si tens algun dubte pots contactar amb nosaltres al telèfon +34 838 88 38 31 o escriure'ns al correu electrònic ajudes@incasol.cat.")
    
    elif not similarity_output:
      response = "Ho sento, però no entenc la teva consulta! Torna a escriure-la o consulta el fòrum de preguntes freqüents (enllaç: https://incasol.gencat.cat/ca/2-serveis_i_tramits/Fiances-de-lloguers/informacio/preguntes-mes-frequents/)"      # Add the user's input to the history
      st.session_state.history.append(
            f"**Usuari - Consulta {st.session_state.counter + 1}:** {st.session_state[f'input_{st.session_state.counter}']}")
      # Add the bot's response to the history
      st.session_state.history.append(f"**Bot:** {response}")
      response = ""

      # Increment the counter for the next iteration
      st.session_state.counter += 1

    else:
        request = predict_sentence(st.session_state[f'input_{st.session_state.counter}'], search_list,
                                   sentence_vectors, vectorizer)
        # Bot responds
        response = chatbot.get_response(request)

        # Add the user's input to the history
        st.session_state.history.append(
            f"**Usuari - Consulta {st.session_state.counter + 1}:** {st.session_state[f'input_{st.session_state.counter}']}")
        # Add the bot's response to the history
        st.session_state.history.append(f"**Bot:** {response}")
        response = ""

        # Increment the counter for the next iteration
        st.session_state.counter += 1
    

# Create a button to reset the input
if st.button('Segueix consultant!', key=f'Reset_{st.session_state.counter}'):
    st.session_state[f'input_{st.session_state.counter}'] = ''

# Display the conversation history outside the button click condition
for i in range(0, len(st.session_state.history), 2):
    user_input = st.session_state.history[i]
    bot_response = st.session_state.history[i + 1]
    
    st.markdown(user_input)
    st.markdown(bot_response)